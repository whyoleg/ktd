name: Build tdlib
on:
  push:
    branches:
      - tdlib/[0-9]+.[0-9]+.[0-9]+

env:
  GRADLE_VERSION: 5.6.4
  BUCKET: ${{ secrets.scaleway_bucket }}
  ENDPOINT: ${{ secrets.scaleway_endpoint }}
  AWS_ACCESS_KEY_ID: ${{ secrets.scaleway_access_key }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.scaleway_secret_key }}
  AWS_DEFAULT_REGION: ${{ secrets.scaleway_region }}

jobs:
  download-gperf:
    runs-on: ubuntu-latest
    steps:
      - name: Download gperf
        uses: actions/aws/cli@master
        with:
          args: s3api get-object --bucket ${{ env.BUCKET }} --endpoint-url ${{ env.ENDPOINT }} --key build/gperf-win/gperf.exe gperf.exe
      - name: Save gperf
        uses: actions/upload-artifact@v1
        with:
          name: gperf
          path: gperf.exe

  generate-tdlib:
    runs-on: ${{ matrix.os }}
    needs: download-gperf
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x86, x64]
        exclude:
          - os: macos-latest
            arch: x86
          - os: ubuntu-latest
            arch: x86
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Build
        uses: eskatos/gradle-command-action@v1
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}
          arguments: build --info

      - name: Download gperf
        if: matrix.os == 'windows-latest'
        uses: actions/download-artifact@v1
        with:
          name: gperf

      - name: Install Windows dependencies
        if: matrix.os == 'windows-latest'
        run: |
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.bat
          ./vcpkg.exe install openssl:${{ matrix.arch }}-windows zlib:${{ matrix.arch }}-windows

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt install make zlib1g-dev libssl-dev gperf libc++abi-dev ccache -y

      - name: Install MacOS dependencies
        if: matrix.os == 'macos-latest'
        run: |
          /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
          brew install gperf coreutils

      - name: Generate tdlib
        uses: eskatos/gradle-command-action@v1
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}
          arguments: :generator:generateTdlib -PGITHUB_REF=${{ github.ref }} -PARCH=${{ matrix.arch }}

      - name: Save tdlib
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}
          path: generator/jni/libs

  upload-tdlib:
    runs-on: ubuntu-latest
    needs: generate-tdlib
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: ubuntu-latest-x64

      - uses: actions/download-artifact@v1
        with:
          name: macos-latest-x64

      - uses: actions/download-artifact@v1
        with:
          name: windows-latest-x64

      - uses: actions/download-artifact@v1
        with:
          name: windows-latest-x86

      - name: Copy libs
        run: |
          mkdir libs
          cp -R ubuntu-latest-x64/* libs
          cp -R macos-latest-x64/* libs
          cp -R windows-latest-x64/* libs
          cp -R windows-latest-x86/* libs

      - name: Upload libs
        uses: actions/aws/cli@master
        with:
          args: s3 cp libs s3://${{ env.BUCKET }}/libs --recursive --endpoint-url ${{ env.ENDPOINT }}

  generate-api:
    runs-on: ubuntu-latest
    needs: upload-tdlib
    steps:
      - uses: actions/checkout@v1
      - name: Set TD_API_VERSION env
        run: echo ::set-env name=TD_API_VERSION::$(echo ${GITHUB_REF:17})

      - name: Build
        uses: eskatos/gradle-command-action@v1
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}
          arguments: build --info

      - name: Generate api ${{ env.TD_API_VERSION }}
        uses: eskatos/gradle-command-action@v1
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}
          arguments: :generator:generateApi -PTD_API_VERSION=${{ env.TD_API_VERSION }} --info

      - name: Build with generated api
        uses: eskatos/gradle-command-action@v1
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}
          arguments: build --info

      - name: Create PR
        uses: peter-evans/create-pull-request@v1
        with:
          commit-message: New api ${{ env.TD_API_VERSION }}
          title: New api ${{ env.TD_API_VERSION }}
          author-name: whyoleg
          author-email: whyoleg@gmail.com
          token: ${{ secrets.GITHUB_TOKEN }}
          base: develop
          branch: tdlib/${{ env.TD_API_VERSION }}
          branch-suffix: none
