package dev.whyoleg.ktd.api

import kotlinx.serialization.*

/**
 * Represents a remote file
 *
 * @property id Remote file identifier
 *              Can be used across application restarts or even from other devices for the current user
 *              Uniquely identifies a file, but a file can have a lot of different valid identifiers
 *              If the ID starts with "http://" or "https://", it represents the HTTP URL of the file
 *              TDLib is currently unable to download files if only their URL is known
 *              If downloadFile is called on such a file or if it is sent to a secret chat, TDLib starts a file generation process by sending updateFileGenerationStart to the client with the HTTP URL in the original_path and "#url#" as the conversion string
 *              Clients should generate the file by downloading it to the specified location
 * @property uniqueId Unique file identifier
 *                    May be empty if unknown
 *                    The unique file identifier which is the same for the same file even for different users and is persistent over time
 * @property isUploadingActive True, if the file is currently being uploaded (or a remote copy is being generated by some other means)
 * @property isUploadingCompleted True, if a remote copy is fully available
 * @property uploadedSize Size of the remote available part of the file
 *                        0 if unknown
 */
@Serializable
@SerialName("remoteFile")
data class TdRemoteFile(
    @SerialName("id")
    val id: String?,
    @SerialName("unique_id")
    val uniqueId: String,
    @SerialName("is_uploading_active")
    val isUploadingActive: Boolean,
    @SerialName("is_uploading_completed")
    val isUploadingCompleted: Boolean,
    @SerialName("uploaded_size")
    val uploadedSize: Int
) : TdObject
